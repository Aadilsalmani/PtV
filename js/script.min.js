"use strict";

window.addEventListener("DOMContentLoaded", () => {
  console.log("🌍 PtV initializing...");

  const map = L.map("map").setView([28.6139, 77.209], 5);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "&copy; OpenStreetMap contributors"
  }).addTo(map);

  const icons = {
    "Priority": L.icon({ iconUrl: "icons/red-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier I": L.icon({ iconUrl: "icons/orange-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier II": L.icon({ iconUrl: "icons/yellow-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier III": L.icon({ iconUrl: "icons/green-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier IV": L.icon({ iconUrl: "icons/blue-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier V": L.icon({ iconUrl: "icons/purple-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    default: L.icon({ iconUrl: "icons/gray-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] })
  };

  const tableBody = document.querySelector("#places-table tbody");
  const locateBtn = document.getElementById("locate-me");
  const filterToggle = document.getElementById("filter-toggle");
  const filterBar = document.getElementById("filter-bar");
  const filterOverlay = document.getElementById("filter-overlay");

  let allPlaces = [];
  let markers = [];
  let userLat, userLon, userMarker = null;
  let userStatus = JSON.parse(localStorage.getItem("userStatus")) || {};
  let watchId = null;
  let autoFollow = true; // 🔄 Controls auto-centering behavior


  // 🧭 Distance
  function getDistance(e, t, a, o) {
    const R = 6371,
      dLat = (a - e) * Math.PI / 180,
      dLon = (o - t) * Math.PI / 180;
    const h = Math.sin(dLat / 2) ** 2 + Math.cos(e * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.sin(dLon / 2) ** 2;
    return R * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));
  }

  // 📍 Live location tracking
  function locateUser() {
    if (!navigator.geolocation) {
      alert("❌ Geolocation not supported.");
      return;
    }

    // Stop any previous tracking
    if (watchId) navigator.geolocation.clearWatch(watchId);

    // Start new position watcher
    watchId = navigator.geolocation.watchPosition(
      pos => {
        userLat = pos.coords.latitude;
        userLon = pos.coords.longitude;

        // Add or update user marker
        if (!userMarker) {
          userMarker = L.marker([userLat, userLon])
            .addTo(map)
            .bindPopup("📍 You are here")
            .openPopup();
        } else {
          userMarker.setLatLng([userLat, userLon]);
        }

        // 🔄 Only recenter map if auto-follow is ON
        if (autoFollow) {
          const currentZoom = map.getZoom();
          map.flyTo([userLat, userLon], currentZoom, { animate: true, duration: 1 });
        }

        applyFilters();
      },
      err => {
        console.warn("GPS error:", err.message);
        applyFilters();
      },
      { enableHighAccuracy: true, maximumAge: 10000, timeout: 20000 }
    );
  }


  // 🎨 Row colors
  function applyRowColor(status, row) {
    const colors = {
      "Visited": "#d6f5d6",
      "Not Interested": "#f2f2f2",
      "Spare/Skip": "#fff5cc",
      "Want to Visit": "#ffffff",
      "Visiting Later": "#d9f9f9"
    };
    if (row && row.style) row.style.backgroundColor = colors[status] || "#fff";
  }

  // ♻️ Restore filters
  function restoreFilters() {
    try {
      const saved = JSON.parse(localStorage.getItem("userFilters"));
      if (!saved) return;
      document.querySelectorAll(".pop-check").forEach(cb => cb.checked = saved.popularity.includes(cb.value));
      document.getElementById("distanceFilter").value = saved.distance;
      document.getElementById("statusFilter").value = saved.status;
    } catch (err) { console.warn("restoreFilters error", err); }
  }

  // 🔍 Apply filters
  function applyFilters() {
    try {
      const saved = {
        popularity: Array.from(document.querySelectorAll(".pop-check:checked")).map(cb => cb.value),
        distance: document.getElementById("distanceFilter").value,
        status: document.getElementById("statusFilter").value
      };
      localStorage.setItem("userFilters", JSON.stringify(saved));

      const t = saved.popularity, a = saved.distance, o = saved.status;
      tableBody.innerHTML = "";
      markers.forEach(m => map.removeLayer(m));
      markers = [];

      let list = allPlaces.filter(item => {
        const lat = parseFloat(item.Latitude);
        const lon = parseFloat(item.Longitude);
        if (isNaN(lat) || isNaN(lon)) return false;
        item.Latitude = lat;
        item.Longitude = lon;

        userLat && userLon ? item.Distance = getDistance(userLat, userLon, lat, lon) : item.Distance = null;
        let ok = t.includes(item.Popularity);
        if (a !== "All" && item.Distance && item.Distance > parseFloat(a)) ok = false;
        const st = userStatus[item.Name] || "Want to Visit";
        if (o !== "All" && st !== o) ok = false;
        return ok;
      });

      if (userLat && userLon) list.sort((x, y) => x.Distance - y.Distance);

      // Keep track of currently open popup globally for this filter update
      // Keep track of the currently open popup globally
      let currentPopup = null;

      list.slice(0, 200).forEach(item => {
        const icon = icons[item.Popularity] || icons.default;
        const marker = L.marker([item.Latitude, item.Longitude], { icon }).addTo(map);

        // ✅ Popup content
        const popupContent = `
          <div style="min-width:180px">
            <b>${item.Name}</b><br>
            ${item.CountryState || "Unknown Location"}<br>
            ${item.Popularity}<br>
            ${item.Distance ? item.Distance.toFixed(2) + " km" : ""}<br>
            <button class="dir-btn"
              onclick="openDirections(${item.Latitude}, ${item.Longitude}, '${(item.Name || '').replace(/'/g, "\\'")}')">
              🧭 Get Directions
            </button>
          </div>
        `;

        // ✅ Bind popup — note `autoClose:false` and `closeOnClick:false`
        marker.bindPopup(popupContent, {
          autoClose: false,
          closeOnClick: false,
          closeButton: true,
          autoPan: false,   // important on mobile
          className: "custom-popup"
        });

        // ✅ Custom open logic
        function openMarkerPopup() {
          // Close previously open popup
          if (currentPopup && map.hasLayer(currentPopup)) {
            map.closePopup(currentPopup);
          }

          // Open this popup safely
          marker.openPopup();
          currentPopup = marker.getPopup();

          // Slight delay to ensure popup stays after map pan
          setTimeout(() => {
            if (currentPopup && map.hasLayer(currentPopup)) {
              map.panTo(marker.getLatLng());
            }
          }, 300);
        }

        // Use both click and tap for safety
        marker.on("click", openMarkerPopup);
        marker.on("tap", openMarkerPopup);

        markers.push(marker);

        // ✅ Table row
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${item.Name}</td>
          <td>${item.Popularity}</td>
          <td>${item.Distance ? item.Distance.toFixed(2) : "-"}</td>
          <td>
            <select class="status-select" data-name="${item.Name}">
              <option value="Want to Visit">Want to Visit</option>
              <option value="Visiting Later">Visiting Later</option>
              <option value="Visited">Visited</option>
              <option value="Not Interested">Not Interested</option>
              <option value="Spare/Skip">Spare/Skip</option>
            </select>
          </td>
        `;

        const sel = row.querySelector(".status-select");
        sel.value = userStatus[item.Name] || "Want to Visit";
        applyRowColor(sel.value, row);

        sel.addEventListener("change", ev => {
          const v = ev.target.value;
          userStatus[item.Name] = v;          
          localStorage.setItem("userStatus", JSON.stringify(userStatus));
          applyRowColor(v, row);
          
          gtag('event', 'status_change', {
            event_category: 'status',
            event_label: item.Name,
            value: ev.target.value
            
          });
          console.log("GA4 Event:", 'status_change', item.Name, ev.target.value);
        }); // ✅ this bracket closes the status change listener properly



        // ✅ Clicking a row also opens popup
        row.addEventListener("click", () => {
          map.flyTo([item.Latitude, item.Longitude], 14, { animate: true });

          setTimeout(() => {
            openMarkerPopup();
          }, 400);
        });

        tableBody.appendChild(row);
      });


      console.log(`✅ Displayed ${list.length} places.`);
      document.getElementById("loading-overlay").style.display = "none";

    } catch (err) {
      console.error("applyFilters error", err);
    }
  }

  // 🧩 Initialize Firebase (No import version, using compat SDK)
  const firebaseConfig = {
    apiKey: "AIzaSyD7_JcaiWu0nOTSwIwPkPaoYprh_YNXryc",
    authDomain: "ptv-data-25e29.firebaseapp.com",
    projectId: "ptv-data-25e29",
    storageBucket: "ptv-data-25e29.firebasestorage.app",
    messagingSenderId: "955391224203",
    appId: "1:955391224203:web:4b62267d8404647a90678e",
    measurementId: "G-YE5X3MP1PN"
  };

  // ✅ Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  // 🗺️ Fetch data from Firestore
  async function loadData() {
    try {
      const snapshot = await db.collection("places").get();
      allPlaces = snapshot.docs.map(doc => doc.data());
      console.log(`✅ Data fetched from Firebase: ${allPlaces.length}`);
      restoreFilters();
      locateUser();
    } catch (err) {
      console.error("⚠️ Firebase fetch failed:", err);
      locateUser();
    }
  }

  loadData();




 // 🧭 Locate & Filter buttons
  if (locateBtn) {
    locateBtn.addEventListener("click", () => {
      autoFollow = !autoFollow; // toggle
      locateBtn.classList.toggle("active", autoFollow);

      if (autoFollow && userLat && userLon) {
        map.flyTo([userLat, userLon], 12, { animate: true });
      }

      // Define message and log it
      const msg = autoFollow
        ? "🟢 Auto-follow ON (map will follow your location)"
        : "🔴 Auto-follow OFF (you can freely explore)";
      console.log(msg);

      // 🧾 Show toast visually
      const msgBox = document.createElement("div");
      msgBox.id = "toast";
      msgBox.textContent = msg;
      document.body.appendChild(msgBox);
      setTimeout(() => msgBox.remove(), 2000);
    });
  }

  


  filterOverlay?.addEventListener("click", () => {
    filterBar.classList.remove("show");
    filterOverlay.style.display = "none";
  });

  // 🎛️ Filter toggle button (to open the filter bar)
  if (filterToggle) {
    filterToggle.addEventListener("click", () => {
      filterBar.classList.toggle("show");
      const isVisible = filterBar.classList.contains("show");
      filterOverlay.style.display = isVisible ? "block" : "none";
    });
}


  // 🧩 Filter & Reset Controls
  document.querySelectorAll(".pop-check")?.forEach(cb =>
    cb.addEventListener("change", applyFilters)
  );

  const distanceFilter = document.getElementById("distanceFilter");
  const statusFilter = document.getElementById("statusFilter");
  const resetBtn = document.getElementById("reset-filters");

  distanceFilter?.addEventListener("change", () => {
    applyFilters();
    gtag('event', 'filter_distance', {
      event_category: 'filter',
      event_label: distanceFilter.value
    });
  });

  statusFilter?.addEventListener("change", () => {
    applyFilters();
    gtag('event', 'filter_status', {
      event_category: 'filter',
      event_label: statusFilter.value
    });
  });


  // 🔄 Reset filters
  resetBtn?.addEventListener("click", () => {
    // Reset popularity checkboxes
    document.querySelectorAll(".pop-check").forEach(cb => (cb.checked = true));

    // Reset dropdowns
    if (distanceFilter) distanceFilter.value = "25";
    if (statusFilter) statusFilter.value = "All";

    // Clear stored filters
    localStorage.removeItem("userFilters");

    // Apply defaults again
    applyFilters();
  });



  // ✅ Register Service Worker (for offline access + updates)
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker
      .register("./service-worker.js")
      .then(reg => console.log("✅ Service Worker registered:", reg.scope))
      .catch(err => console.error("❌ SW registration failed:", err));

    // Optional: listen for version updates
    navigator.serviceWorker.addEventListener("message", event => {
      if (event.data && event.data.type === "NEW_VERSION_AVAILABLE") {
        const toast = document.getElementById("update-toast");
        if (toast) toast.classList.add("show");

        const refreshBtn = document.getElementById("refresh-app");
        if (refreshBtn) {
          refreshBtn.addEventListener("click", () => {
            navigator.serviceWorker.getRegistrations().then(regs => {
              for (const r of regs) r.update();
            });
            window.location.reload(true);
          });
        }
      }
    });
  }




  // 🕒 Guaranteed Splash Removal
  window.addEventListener("load", () => {
    setTimeout(() => {
      const splash = document.getElementById("splash-screen");
      if (splash) {
        splash.classList.add("fade-out");
        setTimeout(() => splash.style.display = "none", 800);
      }
    }, 2500);
  });


  // 🧭 Global function for map direction button
  window.openDirections = function (lat, lon, name) {
    gtag('event', 'get_directions', {
      event_category: 'engagement',
      event_label: name,
      value: 1
    });

    const confirmMsg = `Do you want to open directions to "${name}" in Google Maps?`;
    if (confirm(confirmMsg)) {
      const mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lon}`;
      window.open(mapsUrl, "_blank");
    }
  };



  // 💬 Feedback Modal Logic (resilient version)
  function initFeedbackModal() {
    const feedbackBtn = document.getElementById("feedback-btn");
    const feedbackModal = document.getElementById("feedback-modal");
    const cancelBtn = document.getElementById("cancel-feedback");
    const submitBtn = document.getElementById("submit-feedback");
    const feedbackText = document.getElementById("feedback-text");

    if (!feedbackBtn || !feedbackModal) {
      console.warn("⚠️ Feedback modal elements not ready yet. Retrying...");
      setTimeout(initFeedbackModal, 800);
      return;
    }

    feedbackBtn.addEventListener("click", () => {
      feedbackModal.classList.add("show");
      feedbackText?.focus();
    });

    cancelBtn?.addEventListener("click", () => feedbackModal.classList.remove("show"));

    submitBtn?.addEventListener("click", async () => {
      const text = feedbackText?.value?.trim();
      if (!text) {
        alert("Please write something before sending feedback.");
        return;
      }

      submitBtn.disabled = true;
      submitBtn.textContent = "⏳ Sending...";
      submitBtn.style.opacity = "0.6";

      const data = {
        message: text,
        timestamp: new Date().toLocaleString(),
        userLocation: { lat: userLat || null, lon: userLon || null }
      };

      try {
        await fetch("https://script.google.com/macros/s/AKfycbzqmvWJUOGbFtO02ddkRr3e5_hgn-QmgqnY2ycPyIbxwmuHP9gmBDfD9nK3XDa5diIw3A/exec", {
          method: "POST",
          mode: "no-cors",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        });
        alert("✅ Thank you for your feedback!");
        feedbackText.value = "";
        feedbackModal.classList.remove("show");
      } catch (err) {
        console.error("Feedback submission failed:", err);
        alert("⚠️ Unable to send feedback. Try again later.");
      } finally {
        setTimeout(() => {
          submitBtn.disabled = false;
          submitBtn.textContent = "Send";
          submitBtn.style.opacity = "1";
        }, 2000);
      }
    });
  }

  window.addEventListener("load", initFeedbackModal);
});





// About modal: robust wiring for both close buttons
(function wireAboutModal() {
  // run after DOM ready (safe if script already inside DOMContentLoaded)
  function init() {
    const infoBtn = document.getElementById("info-btn");
    const aboutModal = document.getElementById("about-modal");
    const closeBtn = document.getElementById("close-Btn");
    const closeAboutTop = document.getElementById("close-about-top");

    if (!aboutModal) {
      console.warn("About modal element not found (#about-modal).");
      return;
    }

    // open
    if (infoBtn) {
      infoBtn.addEventListener("click", () => {
        aboutModal.classList.add("show");
        aboutModal.setAttribute("aria-hidden", "false");
      });
    }

    // close handlers
    const closeHandler = () => {

      // optional: return focus to Info button for good UX
      document.getElementById("info-btn")?.focus();

      aboutModal.classList.remove("show");
      aboutModal.setAttribute("aria-hidden", "true");
    };


    if (closeAboutTop) closeAboutTop.addEventListener("click", closeHandler);
    if (closeBtn) closeBtn.addEventListener("click", closeHandler);
    

    // close when clicking outside content
    aboutModal.addEventListener("click", (e) => {
      if (e.target === aboutModal) closeHandler();
    });

    // allow ESC to close
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && aboutModal.classList.contains("show")) closeHandler();
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
})();

