"use strict";const map=L.map("map").setView([28.6139,77.209],5);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"&copy; OpenStreetMap contributors"}).addTo(map);const icons={Priority:L.icon({iconUrl:"icons/red-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),"Tier I":L.icon({iconUrl:"icons/orange-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),"Tier II":L.icon({iconUrl:"icons/yellow-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),"Tier III":L.icon({iconUrl:"icons/green-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),"Tier IV":L.icon({iconUrl:"icons/blue-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),"Tier V":L.icon({iconUrl:"icons/purple-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]}),default:L.icon({iconUrl:"icons/gray-marker.png",iconSize:[40,40],iconAnchor:[14,42],popupAnchor:[0,-35]})};const tableBody=document.querySelector("#places-table tbody");let allPlaces=[],markers=[],userLat,userLon,userMarker=null,userStatus=JSON.parse(localStorage.getItem("userStatus"))||{};function getDistance(e,t,a,o){const l=6371,n=(a-e)*Math.PI/180,i=(o-t)*Math.PI/180,s=Math.sin(n/2)**2+Math.cos(e*Math.PI/180)*Math.cos(a*Math.PI/180)*Math.sin(i/2)**2;return l*2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s))}
let watchId = null;

function locateUser() {
  if (!navigator.geolocation) {
    alert("Geolocation not supported by your browser.");
    applyFilters();
    return;
  }

  // Clear previous watcher (if exists)
  if (watchId) navigator.geolocation.clearWatch(watchId);

  // Start watching position changes
  watchId = navigator.geolocation.watchPosition(
    pos => {
      userLat = pos.coords.latitude;
      userLon = pos.coords.longitude;

      if (!userMarker) {
        // First time marker creation
        userMarker = L.marker([userLat, userLon])
          .addTo(map)
          .bindPopup("📍 You are here")
          .openPopup();
      } else {
        // Update existing marker smoothly
        userMarker.setLatLng([userLat, userLon])
          .bindPopup("📍 You are here");
      }

      // Update map view smoothly
      map.flyTo([userLat, userLon], 12, { animate: true, duration: 1.0 });

      // Reapply filters to recalc distances dynamically
      applyFilters();
    },
    err => {
      console.warn("Location tracking error:", err.message);
      alert("⚠️ Unable to access live location. Please enable GPS and try again.");
      applyFilters();
    },
    {
      enableHighAccuracy: true,
      maximumAge: 10000,
      timeout: 20000
    }
  );
}
function applyRowColor(e,t){const a={Visited:"#d6f5d6","Not Interested":"#f2f2f2","Spare/Skip":"#fff5cc","Want to Visit":"#ffffff","Visiting Later":"#d9f9f9"};if(t&&t.style)t.style.backgroundColor=a[e]||"#fff"}function restoreFilters(){try{const e=JSON.parse(localStorage.getItem("userFilters"));if(!e)return;document.querySelectorAll(".pop-check").forEach(t=>{t.checked=e.popularity.includes(t.value)});const d=document.getElementById("distanceFilter");if(d) d.value=e.distance;const s=document.getElementById("statusFilter");if(s) s.value=e.status}catch(err){console.warn("restoreFilters error",err)}}function applyFilters(){try{const saved={popularity:Array.from(document.querySelectorAll(".pop-check:checked")).map(cb=>cb.value),distance:(document.getElementById("distanceFilter")||{value:"25"}).value,status:(document.getElementById("statusFilter")||{value:"All"}).value};localStorage.setItem("userFilters",JSON.stringify(saved));const t=saved.popularity,a=saved.distance,o=saved.status;tableBody&&(tableBody.innerHTML="");markers.forEach(m=>map.removeLayer(m));markers=[];let list=allPlaces.filter(item=>{if(!item.Latitude||!item.Longitude)return!1;userLat&&userLon?item.Distance=getDistance(userLat,userLon,item.Latitude,item.Longitude):item.Distance=null;let ok=t.includes(item.Popularity);if("All"!==a&&item.Distance&&item.Distance>parseFloat(a))ok=!1;const st=userStatus[item.Name]||"Want to Visit";if("All"!==o&&st!==o)ok=!1;return ok});if(userLat&&userLon)list.sort((x,y)=>x.Distance-y.Distance);list.slice(0,200).forEach(item=>{const icon=icons[item.Popularity]||icons.default;const marker=L.marker([item.Latitude,item.Longitude],{icon}).addTo(map);marker.bindPopup(`<b>${item.Name}</b><br>${item.CountryState||"Unknown Location"}<br>${item.Popularity}<br>${item.Distance?item.Distance.toFixed(2)+" km":""}<br><button class="dir-btn" onclick="openDirections(${item.Latitude},${item.Longitude},'${(item.Name||"").replace(/'/g,"\\'")}')">🧭 Get Directions</button>`);markers.push(marker);if(tableBody){const row=document.createElement("tr");row.innerHTML=`<td>${item.Name}</td><td>${item.Popularity}</td><td>${item.Distance?item.Distance.toFixed(2):"-"}</td><td><select class="status-select" data-name="${item.Name}"><option value="Want to Visit">Want to Visit</option><option value="Visiting Later">Visiting Later</option><option value="Visited">Visited</option><option value="Not Interested">Not Interested</option><option value="Spare/Skip">Spare/Skip</option></select></td>`;const sel=row.querySelector(".status-select");if(sel){sel.value=userStatus[item.Name]||"Want to Visit";applyRowColor(sel.value,row);sel.addEventListener("change",ev=>{const v=ev.target.value;userStatus[item.Name]=v;localStorage.setItem("userStatus",JSON.stringify(userStatus));applyRowColor(v,row)});}row.addEventListener("click",()=>{map.setView([item.Latitude,item.Longitude],14);marker.openPopup()});tableBody.appendChild(row)}});const lo=document.getElementById("loading-overlay");if(lo)lo.style.display="none";}catch(err){console.error("applyFilters error",err)}}window.openDirections=function(lat,lon,name){try{const msg=`Do you want to open directions to \"${name}\" in Google Maps?`;if(confirm(msg)){const url=`https://www.google.com/maps/dir/?api=1&destination=${lat},${lon}`;window.open(url,"_blank")}}catch(err){console.error("openDirections error",err)}};fetch("https://script.google.com/macros/s/AKfycbzcOUrsQ2AUCPTNKy_3a60IwFQ7myEJbJdISRAZrEBKM6X0PoRscwSXIvwVk_em3vAX/exec").then(r=>r.json()).then(data=>{allPlaces=data;restoreFilters();locateUser();}).catch(err=>{console.error("Data load error:",err);const lo=document.getElementById("loading-overlay");if(lo)lo.style.display="none"});document.querySelectorAll(".pop-check")?.forEach(cb=>cb.addEventListener("change",applyFilters));const df=document.getElementById("distanceFilter");df&&df.addEventListener("change",applyFilters);const sf=document.getElementById("statusFilter");sf&&sf.addEventListener("change",applyFilters);const filterToggle=document.getElementById("filter-toggle"),filterBar=document.getElementById("filter-bar"),filterOverlay=document.getElementById("filter-overlay");if(filterToggle)filterToggle.addEventListener("click",()=>{if(!filterBar||!filterOverlay)return;const s=filterBar.classList.toggle("show");filterOverlay.style.display=s?"block":"none"});if(filterOverlay)filterOverlay.addEventListener("click",()=>{if(!filterBar||!filterOverlay)return;filterBar.classList.remove("show");filterOverlay.style.display="none"});const locateBtn=document.getElementById("locate-me");if(locateBtn){locateBtn.addEventListener("click",()=>{if(userLat&&userLon){map.flyTo([userLat,userLon],12,{animate:!0,duration:1.2});if(userMarker)userMarker.setLatLng([userLat,userLon]).bindPopup("📍 You are here").openPopup();else userMarker=L.marker([userLat,userLon]).addTo(map).bindPopup("📍 You are here").openPopup()}else if(navigator.geolocation){navigator.geolocation.getCurrentPosition(p=>{userLat=p.coords.latitude;userLon=p.coords.longitude;map.flyTo([userLat,userLon],12,{animate:!0,duration:1.2});if(userMarker)userMarker.setLatLng([userLat,userLon]).bindPopup("📍 You are here").openPopup();else userMarker=L.marker([userLat,userLon]).addTo(map).bindPopup("📍 You are here").openPopup()},err=>{alert("⚠️ Unable to access location. Please enable GPS or try again.");console.warn("Locate button error:",err.message)})}else alert("❌ Geolocation not supported by your device/browser.")})}if("serviceWorker"in navigator){navigator.serviceWorker.register("service-worker.js").then(()=>console.log("Service Worker registered")).catch(e=>console.error("SW registration failed:",e));navigator.serviceWorker.addEventListener("message",event=>{if(event.data&&event.data.type==="NEW_VERSION_AVAILABLE"){const toast=document.getElementById("update-toast");if(toast)toast.classList.add("show");const refreshBtn=document.getElementById("refresh-app");if(refreshBtn)refreshBtn.addEventListener("click",()=>{navigator.serviceWorker.getRegistrations().then(regs=>{for(const r of regs)r.update()});window.location.reload(true)})}})}window.addEventListener("load",()=>{setTimeout(()=>{const s=document.getElementById("splash-screen");if(s){s.classList.add("fade-out");setTimeout(()=>s.style.display="none",600)}},1500)});

// 📝 Feedback Modal Logic
window.addEventListener("DOMContentLoaded", () => {
  const feedbackBtn = document.getElementById("feedback-btn");
  const feedbackModal = document.getElementById("feedback-modal");
  const cancelBtn = document.getElementById("cancel-feedback");
  const submitBtn = document.getElementById("submit-feedback");
  const feedbackText = document.getElementById("feedback-text");

  if (!feedbackBtn || !feedbackModal) return;

  feedbackBtn.addEventListener("click", () => feedbackModal.classList.add("show"));
  cancelBtn?.addEventListener("click", () => feedbackModal.classList.remove("show"));

  submitBtn?.addEventListener("click", async () => {
    const text = feedbackText?.value?.trim();
    if (!text) {
      alert("Please write something before sending feedback.");
      return;
    }

    // 🛑 Disable button to avoid duplicates
    submitBtn.disabled = true;
    submitBtn.textContent = "⏳ Sending...";
    submitBtn.style.opacity = "0.6";

    const data = {
      message: text,
      timestamp: new Date().toLocaleString(),
      userLocation: { lat: userLat || null, lon: userLon || null }
    };

    try {
      await fetch("https://script.google.com/macros/s/AKfycbzqmvWJUOGbFtO02ddkRr3e5_hgn-QmgqnY2ycPyIbxwmuHP9gmBDfD9nK3XDa5diIw3A/exec", {
        method: "POST",
        mode: "no-cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      alert("✅ Thank you for your feedback!");
      feedbackText.value = "";
      feedbackModal.classList.remove("show");
    } catch (err) {
      console.error("Feedback submission failed:", err);
      alert("⚠️ Unable to send feedback. Try again later.");
    } finally {
      setTimeout(() => {
        submitBtn.disabled = false;
        submitBtn.textContent = "Send";
        submitBtn.style.opacity = "1";
      }, 2000);
    }
  });
}); // ✅ closes DOMContentLoaded listener safely
