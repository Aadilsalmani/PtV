"use strict";

window.addEventListener("DOMContentLoaded", () => {
  console.log("üåç PtV initializing...");

  const map = L.map("map").setView([28.6139, 77.209], 5);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "&copy; OpenStreetMap contributors"
  }).addTo(map);

  const icons = {
    "Priority": L.icon({ iconUrl: "icons/red-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier I": L.icon({ iconUrl: "icons/orange-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier II": L.icon({ iconUrl: "icons/yellow-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier III": L.icon({ iconUrl: "icons/green-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier IV": L.icon({ iconUrl: "icons/blue-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    "Tier V": L.icon({ iconUrl: "icons/purple-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] }),
    default: L.icon({ iconUrl: "icons/gray-marker.png", iconSize: [40, 40], iconAnchor: [14, 42], popupAnchor: [0, -35] })
  };

  const tableBody = document.querySelector("#places-table tbody");
  const locateBtn = document.getElementById("locate-me");
  const filterToggle = document.getElementById("filter-toggle");
  const filterBar = document.getElementById("filter-bar");
  const filterOverlay = document.getElementById("filter-overlay");

  let allPlaces = [];
  let markers = [];
  let userLat, userLon, userMarker = null;
  let userStatus = JSON.parse(localStorage.getItem("userStatus")) || {};
  let watchId = null;

  // üß≠ Distance
  function getDistance(e, t, a, o) {
    const R = 6371,
      dLat = (a - e) * Math.PI / 180,
      dLon = (o - t) * Math.PI / 180;
    const h = Math.sin(dLat / 2) ** 2 + Math.cos(e * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.sin(dLon / 2) ** 2;
    return R * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));
  }

  // üìç Live location tracking
  function locateUser() {
    if (!navigator.geolocation) {
      alert("‚ùå Geolocation not supported.");
      return;
    }
    if (watchId) navigator.geolocation.clearWatch(watchId);

    watchId = navigator.geolocation.watchPosition(
      pos => {
        userLat = pos.coords.latitude;
        userLon = pos.coords.longitude;
        if (!userMarker) {
          userMarker = L.marker([userLat, userLon])
            .addTo(map)
            .bindPopup("üìç You are here")
            .openPopup();
        } else userMarker.setLatLng([userLat, userLon]);
        map.flyTo([userLat, userLon], 12, { animate: true });
        applyFilters();
      },
      err => {
        console.warn("GPS error:", err.message);
        applyFilters();
      },
      { enableHighAccuracy: true, maximumAge: 10000, timeout: 20000 }
    );
  }

  // üé® Row colors
  function applyRowColor(status, row) {
    const colors = {
      "Visited": "#d6f5d6",
      "Not Interested": "#f2f2f2",
      "Spare/Skip": "#fff5cc",
      "Want to Visit": "#ffffff",
      "Visiting Later": "#d9f9f9"
    };
    if (row && row.style) row.style.backgroundColor = colors[status] || "#fff";
  }

  // ‚ôªÔ∏è Restore filters
  function restoreFilters() {
    try {
      const saved = JSON.parse(localStorage.getItem("userFilters"));
      if (!saved) return;
      document.querySelectorAll(".pop-check").forEach(cb => cb.checked = saved.popularity.includes(cb.value));
      document.getElementById("distanceFilter").value = saved.distance;
      document.getElementById("statusFilter").value = saved.status;
    } catch (err) { console.warn("restoreFilters error", err); }
  }

  // üîç Apply filters
  function applyFilters() {
    try {
      const saved = {
        popularity: Array.from(document.querySelectorAll(".pop-check:checked")).map(cb => cb.value),
        distance: document.getElementById("distanceFilter").value,
        status: document.getElementById("statusFilter").value
      };
      localStorage.setItem("userFilters", JSON.stringify(saved));

      const t = saved.popularity, a = saved.distance, o = saved.status;
      tableBody.innerHTML = "";
      markers.forEach(m => map.removeLayer(m));
      markers = [];

      let list = allPlaces.filter(item => {
        const lat = parseFloat(item.Latitude);
        const lon = parseFloat(item.Longitude);
        if (isNaN(lat) || isNaN(lon)) return false;
        item.Latitude = lat;
        item.Longitude = lon;

        userLat && userLon ? item.Distance = getDistance(userLat, userLon, lat, lon) : item.Distance = null;
        let ok = t.includes(item.Popularity);
        if (a !== "All" && item.Distance && item.Distance > parseFloat(a)) ok = false;
        const st = userStatus[item.Name] || "Want to Visit";
        if (o !== "All" && st !== o) ok = false;
        return ok;
      });

      if (userLat && userLon) list.sort((x, y) => x.Distance - y.Distance);

      list.slice(0, 200).forEach(item => {
        const icon = icons[item.Popularity] || icons.default;
        const marker = L.marker([item.Latitude, item.Longitude], { icon }).addTo(map);
        marker.bindPopup(`
          <b>${item.Name}</b><br>
          ${item.CountryState || "Unknown Location"}<br>
          ${item.Popularity}<br>
          ${item.Distance ? item.Distance.toFixed(2) + " km" : ""}<br>
          <button class="dir-btn" onclick="openDirections(${item.Latitude},${item.Longitude},'${(item.Name || "").replace(/'/g, "\\'")}')">üß≠ Get Directions</button>
        `);
        markers.push(marker);

        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${item.Name}</td>
          <td>${item.Popularity}</td>
          <td>${item.Distance ? item.Distance.toFixed(2) : "-"}</td>
          <td>
            <select class="status-select" data-name="${item.Name}">
              <option value="Want to Visit">Want to Visit</option>
              <option value="Visiting Later">Visiting Later</option>
              <option value="Visited">Visited</option>
              <option value="Not Interested">Not Interested</option>
              <option value="Spare/Skip">Spare/Skip</option>
            </select>
          </td>`;
        const sel = row.querySelector(".status-select");
        sel.value = userStatus[item.Name] || "Want to Visit";
        applyRowColor(sel.value, row);
        sel.addEventListener("change", ev => {
          const v = ev.target.value;
          userStatus[item.Name] = v;
          localStorage.setItem("userStatus", JSON.stringify(userStatus));
          applyRowColor(v, row);
        });
        row.addEventListener("click", () => { map.setView([item.Latitude, item.Longitude], 14); marker.openPopup(); });
        tableBody.appendChild(row);
      });

      console.log(`‚úÖ Displayed ${list.length} places.`);
      document.getElementById("loading-overlay").style.display = "none";
    } catch (err) { console.error("applyFilters error", err); }
  }

  // üó∫Ô∏è Load data
  fetch("./data/tourist_data.json")
    .then(res => res.json())
    .then(data => {
      console.log("‚úÖ Data fetched:", data.length);
      console.log("üì¶ Sample data:", data[0]);
      allPlaces = data;
      restoreFilters();
      locateUser();
    })

    .catch(err => {
      console.error("‚ö†Ô∏è Data load error:", err);
      locateUser(); // still load map
    });

  // üß≠ Locate & Filter buttons
  locateBtn?.addEventListener("click", locateUser);
  filterToggle?.addEventListener("click", () => {
    const visible = filterBar.classList.toggle("show");
    filterOverlay.style.display = visible ? "block" : "none";
  });
  filterOverlay?.addEventListener("click", () => {
    filterBar.classList.remove("show");
    filterOverlay.style.display = "none";
  });

  // üïí Guaranteed Splash Removal
  window.addEventListener("load", () => {
    setTimeout(() => {
      const splash = document.getElementById("splash-screen");
      if (splash) {
        splash.classList.add("fade-out");
        setTimeout(() => splash.style.display = "none", 800);
      }
    }, 2500);
  });

  
  // üß≠ Global function for map direction button
  window.openDirections = function (lat, lon, name) {
    const confirmMsg = `Do you want to open directions to "${name}" in Google Maps?`;
    if (confirm(confirmMsg)) {
      const mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lon}`;
      window.open(mapsUrl, "_blank");
    }
  };



  // üí¨ Feedback Modal Logic (resilient version)
  function initFeedbackModal() {
    const feedbackBtn = document.getElementById("feedback-btn");
    const feedbackModal = document.getElementById("feedback-modal");
    const cancelBtn = document.getElementById("cancel-feedback");
    const submitBtn = document.getElementById("submit-feedback");
    const feedbackText = document.getElementById("feedback-text");

    if (!feedbackBtn || !feedbackModal) {
      console.warn("‚ö†Ô∏è Feedback modal elements not ready yet. Retrying...");
      setTimeout(initFeedbackModal, 800);
      return;
    }

    feedbackBtn.addEventListener("click", () => {
      feedbackModal.classList.add("show");
      feedbackText?.focus();
    });

    cancelBtn?.addEventListener("click", () => feedbackModal.classList.remove("show"));

    submitBtn?.addEventListener("click", async () => {
      const text = feedbackText?.value?.trim();
      if (!text) {
        alert("Please write something before sending feedback.");
        return;
      }

      submitBtn.disabled = true;
      submitBtn.textContent = "‚è≥ Sending...";
      submitBtn.style.opacity = "0.6";

      const data = {
        message: text,
        timestamp: new Date().toLocaleString(),
        userLocation: { lat: userLat || null, lon: userLon || null }
      };

      try {
        await fetch("https://script.google.com/macros/s/AKfycbzqmvWJUOGbFtO02ddkRr3e5_hgn-QmgqnY2ycPyIbxwmuHP9gmBDfD9nK3XDa5diIw3A/exec", {
          method: "POST",
          mode: "no-cors",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        });
        alert("‚úÖ Thank you for your feedback!");
        feedbackText.value = "";
        feedbackModal.classList.remove("show");
      } catch (err) {
        console.error("Feedback submission failed:", err);
        alert("‚ö†Ô∏è Unable to send feedback. Try again later.");
      } finally {
        setTimeout(() => {
          submitBtn.disabled = false;
          submitBtn.textContent = "Send";
          submitBtn.style.opacity = "1";
        }, 2000);
      }
    });
  }

  window.addEventListener("load", initFeedbackModal);
});
